package com.github.aramkhezry.MyStore.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMOREY".
*/
public class MemoreyDao extends AbstractDao<Memorey, Long> {

    public static final String TABLENAME = "MEMOREY";

    /**
     * Properties of entity Memorey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property CreatTime = new Property(3, String.class, "creatTime", false, "CREAT_TIME");
        public final static Property ImageName = new Property(4, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property MemoryDate = new Property(5, String.class, "memoryDate", false, "MEMORY_DATE");
        public final static Property Favorite = new Property(6, Boolean.class, "favorite", false, "FAVORITE");
        public final static Property Hashtag = new Property(7, String.class, "hashtag", false, "HASHTAG");
    };


    public MemoreyDao(DaoConfig config) {
        super(config);
    }
    
    public MemoreyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMOREY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TEXT\" TEXT," + // 2: text
                "\"CREAT_TIME\" TEXT," + // 3: creatTime
                "\"IMAGE_NAME\" TEXT," + // 4: imageName
                "\"MEMORY_DATE\" TEXT," + // 5: memoryDate
                "\"FAVORITE\" INTEGER," + // 6: favorite
                "\"HASHTAG\" TEXT);"); // 7: hashtag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMOREY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Memorey entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String creatTime = entity.getCreatTime();
        if (creatTime != null) {
            stmt.bindString(4, creatTime);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(5, imageName);
        }
 
        String memoryDate = entity.getMemoryDate();
        if (memoryDate != null) {
            stmt.bindString(6, memoryDate);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(7, favorite ? 1L: 0L);
        }
 
        String hashtag = entity.getHashtag();
        if (hashtag != null) {
            stmt.bindString(8, hashtag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Memorey readEntity(Cursor cursor, int offset) {
        Memorey entity = new Memorey( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // creatTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imageName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // memoryDate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // favorite
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // hashtag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Memorey entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMemoryDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFavorite(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setHashtag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Memorey entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Memorey entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
